{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/docs/bluebrainnexustutorialkcni/notebooks/morphology-integration/README.html","text":"","title":"Nexus morphology integration"},{"location":"/docs/bluebrainnexustutorialkcni/notebooks/morphology-integration/README.html#nexus-morphology-integration","text":"","title":"Nexus morphology integration"},{"location":"/docs/bluebrainnexustutorialkcni/notebooks/morphology-integration/README.html#step-1-configure-the-blue-brain-nexus-environment","text":"Go to Nexus Web (https://bbp.epfl.ch/nexus/web) and obtain the access token. Fill the config.json with the deployment url, organization and project name as well as the token.","title":"Step 1: Configure the Blue Brain Nexus Environment"},{"location":"/docs/bluebrainnexustutorialkcni/notebooks/morphology-integration/README.html#step-2-fill-the-metadata-of-the-morphology","text":"Fill the metadata.json with all the fields except mtype which is an optional field.","title":"Step 2: Fill the metadata of the morphology"},{"location":"/docs/bluebrainnexustutorialkcni/notebooks/morphology-integration/README.html#step-3-ingest-data","text":"Run the nexus-morphology-integration.py to ingest data in the terminal. If the ingestion succeeds, it would return the Nexus IDs of the ingested entities.\n$ python nexus-morphology-integration.py $metadata.json\nNexus instance connected\n\nData ingested successfully. The resulting Nexus IDs are: \n{\n  \"image_id\": \"https://bbp.epfl.ch/neurosciencegraph/data/imagestack.18454\",\n  \"subject_id\": \"https://bbp.epfl.ch/neurosciencegraph/data/subject.Ai82;Ai140-37336\",\n  \"morphology_id\": \"https://bbp.epfl.ch/neurosciencegraph/data/neuronmorphology.z3718-x10944-y12141\"\n}\n\nPlease email the resulting IDs to <patrycja.lurie@epfl.ch>","title":"Step 3: Ingest data"},{"location":"/docs/bluebrainnexustutorialkcni/notebooks/morphology-integration/README.html#step-4-notify-data-curator","text":"Notify the morphology curator at EPFL by email to patrycja.lurie@epfl.ch.","title":"Step 4: Notify data curator"},{"location":"/docs/bluebrainnexustutorialkcni/index.html","text":"","title":"Blue Brain Nexus Workshop"},{"location":"/docs/bluebrainnexustutorialkcni/index.html#blue-brain-nexus-workshop","text":"","title":"Blue Brain Nexus Workshop"},{"location":"/docs/bluebrainnexustutorialkcni/index.html#overview","text":"This documentation contains a set of hands-on and example-driven tutorials showing how to:\nQuickly start with Blue Brain Nexus Understand, build and query a Knowledge Graph Ingest Allen Cell Types Database data in Blue Brain Nexus using Neuroshapes Use the Blue Brain Knowledge Graph schema for publishing data at web scale","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/index.html","text":"","title":"Quick Start Tutorial"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/index.html#quick-start-tutorial","text":"","title":"Quick Start Tutorial"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/index.html#overview","text":"This Getting Started tutorial introduces basic Blue Brain Nexus features and capabilities.","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/index.html#what-youll-build","text":"A project within a Blue Brain Nexus deployment where a set of entities are ingested and queryable. This tutorial will use a small version of the Global Research Identifier Database (GRID) dataset which is a catalog of the world’s research organisations.","title":"What you’ll build"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/index.html#what-youll-learn","text":"How to set up the Blue Brain Nexus CLI How to create and configure a project How to ingest data How to access data","title":"What you’ll learn"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/index.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/setup/index.html","text":"","title":"Set up"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/setup/index.html#set-up","text":"","title":"Set up"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/setup/index.html#overview","text":"This tutorial explains how to install and set up the Blue Brain Nexus CLI to connect to a Blue Brain Nexus deployment.\nNote This tutorial makes use of an AWS deployment of Blue Brain Nexus available at https://sandbox.bluebrainnexus.io/v1. We will be using Nexus CLI, a python client, to interact with the deployment.\nLet’s get started.","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/setup/index.html#install-the-cli","text":"Since the CLI is written in python, you may want to create a virtual environment for a clean set up. To do so, Conda can be used. If you don’t have it installed follow the instructions here.\nconda create -n nexus-cli python=3.6\nconda activate nexus-cli\npip install git+https://github.com/BlueBrain/nexus-cli","title":"Install the CLI"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/setup/index.html#connect-to-a-nexus-deployment","text":"","title":"Connect to a Nexus deployment"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/setup/index.html#configure-the-cli-to-point-to-a-specific-blue-brain-nexus-deployment","text":"To ease the usage of the CLI, we will create a profile named ‘tutorial’ storing locally various configurations such as the Nexus deployment url.\nCommand nexus profiles create tutorial https://sandbox.bluebrainnexus.io/v1 && nexus profiles select tutorial && nexus profiles listFull source at GitHub Output Profile created.\nSelected profile: tutorial\n+------------+----------+--------------------------------------+-------+\n| Profile    | Selected | URL                                  | Token |\n+------------+----------+--------------------------------------+-------+\n| tutorial   |   Yes    | https://sandbox.bluebrainnexus.io/v1 |  None |\n+------------+----------+--------------------------------------+-------+Full source at GitHub","title":"Configure the CLI to point to a specific Blue Brain Nexus deployment"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/setup/index.html#login","text":"A bearer token is needed to authenticate to Nexus. For the purpose of this tutorial, you’ll login using your github account.\nThe following command will open (after pressing enter button) a browser window from where you can login using your github account.\nCommand nexus auth webFull source at GitHub Output A browser window will now open, please login, copy your token and use the auth set-token command to store it in the CLI\nPress ENTER to continue...Full source at GitHub\nFrom the opened web page, click on the login button on the right corner and follow the instructions.\nAt the end you’ll see a token button on the right corner. Click on it to copy the token.\nThe token can now be added to the tutorial profile. In the output of the following command you should see that the token column has now an expiry date.\nCommand nexus auth set-token $TOKEN && nexus profiles listFull source at GitHub Output +--------------+----------+-------------------------------------+-----------------------------+\n| Profile      | Selected | URL                                 |            Token            |\n+--------------+----------+-------------------------------------+-----------------------------+\n| tutorial     |   Yes    | https://sandbox.bluebrainnexus.io/v1         | Expiry: YYYY-MM-DD HH:mm:s |\n+--------------+----------+-------------------------------------+-----------------------------+Full source at GitHub\nThat’s it!","title":"Login"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/setup/index.html#running-locally-the-jupyter-notebooks","text":"If the Jupyter notebooks in the tutorial are ran locally then they need to be cloned from the github project: https://github.com/BlueBrain/nexus-bbp-domains.git.\ncd ~\ngit clone https://github.com/BlueBrain/nexus-bbp-domains.git\ncd ~/nexus-bbp-domains\ngit checkout docs\ncd src/main/paradox/docs/bluebrainnexustutorialkcni","title":"Running locally the Jupyter notebooks"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html","text":"","title":"Quick Start"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#quick-start","text":"","title":"Quick Start"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#overview","text":"This example-driven tutorial presents 5 steps to get started with Blue Brain Nexus to build and query a simple knowledge graph. The goal is to go over some capabilities of Blue Brain Nexus enabling:\nThe creation of a project as a protected data space to work with An easy ingestion of a dataset Querying a dataset to retrieve various information Sharing a dataset by making it public\nFor that we will work with the small version of the Global Research Identifier Database (GRID) dataset containing a set of:\ninstitutes (institutes.csv) their acronyms (acronyms.csv) their addresses (addresses.csv) their urls (links.csv)\nAn overview of this dataset can be found here.\nNote We will be using Blue Brain Nexus CLI, a python client throughout this quick start tutorial. This tutorial assumes you’ve installed and configured the CLI. If not, please follow the Set up instructions.\nLet’s get started.","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#create-a-project","text":"Projects in BlueBrain Nexus are spaces where data can be:\nmanaged: created, updated, deprecated, validated, secured; accessed: directly by ids or through various search interfaces; shared: through fine grain Access Control List.\nA project is always created within an organization just like a git repository is created in a github organization. Organizations can be understood as accounts hosting multiple projects.","title":"Create a project"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#select-an-organization","text":"Note A public organization named tutorialnexus is already created for the purpose of this tutorial. All projects will be created under this organization.\nThe following command should list the organizations you have access to. The tutorialnexus organization should be listed and tagged as non-deprecated in the output.\nCommand nexus orgs listFull source at GitHub Output +----------------+-------------------+-------------------------------------------------+------------+\n| Name           | Description       | Id                                              | Deprecated |\n+----------------+-------------------+-----------------------------------------------------+--------+\n| tutorialnexus  | Nexus sandbox     | https://sandbox.bluebrainnexus.io/v1/tutorialnexus     | False      |Full source at GitHub\nLet select the tutorialnexus organization.\nCommand nexus orgs select tutorialnexusFull source at GitHub Output tutorialnexus organization selected.Full source at GitHub","title":"Select an organization"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#create-a-project","text":"A project is created with a label and within an organization. The label should be made of alphanumerical characters and its length should be between 3 and 32 (it should match the regex: [a-zA-Z0-9-_]{3,32}).\nPick a label (hereafter referred to as $PROJECTLABEL) and create a project using the following command. It is recommended to use your github username to avoid collision of projects labels within an organization.\nCommand nexus projects create $PROJECTLABEL && nexus projects listFull source at GitHub Output Project created (id: https://sandbox.bluebrainnexus.io/v1/projects/tutorialnexus/$PROJECTLABEL)\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| Label         | Description | Id                                                                     | Deprecated |\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| $PROJECTLABEL |             | https://sandbox.bluebrainnexus.io/v1/projects/tutorialnexus/$PROJECTLABEL | False      |\n+---------------+-------------+------------------------------------------------------------------------+------------+Full source at GitHub\nBy default, created projects are private meaning that only the project creator (you) has read and write access to it. We’ll see below how to make a project public.\nThe output of the previous command shows the list of projects you have read access to. The project you just created should be the only one listed at this point. Let select it.\nCommand nexus projects select $PROJECTLABEL && nexus projects listFull source at GitHub Output $PROJECTLABEL project selected\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| Label         | Description | Id                                                                     | Deprecated |\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| $PROJECTLABEL |             | https://sandbox.bluebrainnexus.io/v1/projects/tutorialnexus/$PROJECTLABEL | False      |\n+---------------+-------------+------------------------------------------------------------------------+------------+Full source at GitHub\nWe are all set to bring some data within the project we just created.","title":"Create a project"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#ingest-data","text":"","title":"Ingest data"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#load-the-dataset","text":"Let first list the files that made the small version of the GRID dataset.\nCommand cd getting-started/dataset/grid-small && lsFull source at GitHub Output acronyms.csv  addresses.csv  institutes.csv  links.csv  relationships.csvFull source at GitHub\nThe data to be ingested come in 5 csv files (see the output of the above command) containing each a partial description of the organizations. A single command allows to load the organisations within the institutes.csv file and merge it with links.csv, addresses.csv and acronyms.csv.\nnexus resources create --file institutes.csv --type Organization --format csv \\\n --idcolumn grid_id --idnamespace http://www.grid.ac/institutes/ \\\n --mergewith links.csv --mergewith addresses.csv --mergewith acronyms.csv \\\n --mergeon grid_id \\\n --max-connections 4","title":"Load the dataset"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#access-data","text":"","title":"Access data"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#view-data-in-nexus-web","text":"Nexus is deployed with a developer oriented web application allowing to browse organizations, projects, data and schemas you have access to. You can go to the address https://sandbox.bluebrainnexus.io/web/tutorialnexus and search for your project and browse the data you just loaded. The following panel should be visible with the loaded organizations. They can be filtered by type and a simple full text search can be performed.","title":"View data in Nexus Web"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#query-data","text":"Listing is usually not enough to select specific subset of data. Data ingested within each project can be searched through two complementary search interfaces called views.\nView Description ElasticSearchView Exposes data in ElasticSearch, a document oriented search engine and provide access to it using the ElasticSearch query language. SparqlView Exposes data as a graph and allows to navigate and explore the data using the W3C Sparql query language.","title":"Query data"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#query-data-using-the-elasticsearchview","text":"The ElasticSearchView view is available in Nexus web at the address https://sandbox.bluebrainnexus.io/web/tutorialnexus/$PROJECTLABEL/nxv:defaultElasticSearchIndex/_search. The following query selects 5 organizations (entities of types Organization) sorted by creation date in descending order. Note that the type is a generated HTTP based URI.\n{\n     \"size\":5,\n     \"sort\" : [\n       {\n        \"_createdAt\" : {\"order\" : \"desc\"}\n       }\n     ],\n     \"query\": {\n     \t\"terms\" : {\"@type\":[\"https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Organization\"]}\n     }\n }\nCopy and past the query (change $PROJECTLABEL to your own project) in Nexus web as shown in the following figure.","title":"Query data using the ElasticSearchView"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#query-data-using-the-sparqlview","text":"The SparqlView is available at the address https://sandbox.bluebrainnexus.io/web/tutorialnexus/$PROJECTLABEL/nxv:defaultSparqlIndex/sparql.\nThe following query selects 5 organizations (entities of types Organization) sorted by creation date in descending order.\nPREFIX vocab: <https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/>\nPREFIX nxv: <https://bluebrain.github.io/nexus/vocabulary/>\nSelect ?org ?name ?createdAt\n WHERE  {\n\n    ?org a vocab:Organization.\n    ?org vocab:name  ?name.\n    ?org nxv:createdAt ?createdAt\n}\nORDER BY DESC (?createdAt)\nLIMIT 5\nCopy and past the query (change $PROJECTLABEL to your own project) in Nexus web as shown in the following figure.","title":"Query data using the SparqlView"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/quick-start/index.html#share-data","text":"Making a dataset public means granting read permissions to “anonymous” user.\n$ nexus acls make-public\nTo check that the dataset is now public:\nAsk the person next to you to list resources in your project. Or create and select another profile named public-tutorial (following the instructions in the Set up. You should see the that the public-tutorial is selected and its corresponding token column is None.\nOutput Selected profile: tutorial\n+-------------------+----------+-------------------------------------+------------------+\n| Profile           | Selected | URL                                 |       Token      |\n+-------------------+----------+-------------------------------------+------------------+\n| tutorial          |          | https://sandbox.bluebrainnexus.io/v1         |  Expiry: 2019... |\n| public-tutorial   |   Yes    | https://sandbox.bluebrainnexus.io/v1         |       None       |\n+-------------------+----------+-------------------------------------+------------------+Full source at GitHub\nResources in your project should be listed with the command even though you are not authenticated.\nCommand nexus resources list --size 5 -o tutorialnexus -p $PROJECTLABELFull source at GitHub","title":"Share data"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/dataset/index.html","text":"","title":"The GRID Dataset"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/dataset/index.html#the-grid-dataset","text":"","title":"The GRID Dataset"},{"location":"/docs/bluebrainnexustutorialkcni/getting-started/dataset/index.html#overview","text":"In this tutorial, we’ll use a small version of the GRID dataset. GRID is an open dataset of research organizations and institutes from all around the world. It provides detailed descriptions of organizations in csv, json.","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/index.html","text":"","title":"Understanding knowledge graphs"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/index.html#understanding-knowledge-graphs","text":"","title":"Understanding knowledge graphs"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/index.html#overview","text":"How does Google display information card like in the following search ? Well they use the Google Knowledge Graph. Knowledge graphs are now ubiquitous and serves as data integration hub to integrate and connect data of different types, formats and sources.","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/index.html#what-youll-build","text":"A simple knowledge graph following a step by step approach Queries to explore and navigate the knowledge graph","title":"What you’ll build"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/index.html#what-youll-learn","text":"What is a knowledge graph ? JSON-LD and the Resource Description Framework (RDF) data model How to query a knowledge graph ?","title":"What you’ll learn"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/index.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/thinking-in-graph.html","text":"","title":"Thinking in graph"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/thinking-in-graph.html#thinking-in-graph","text":"","title":"Thinking in graph"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/thinking-in-graph.html#what-is-a-knowledge-graph-","text":"In this section, we will explain what a Knowledge Graph and some of the advantages of using them.","title":"What is a Knowledge Graph ?"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/thinking-in-graph.html#it-is-a-graph-structure","text":"A knowledge graph uses a graph data structure to represent information, it uses the concept of nodes and edges to represent respectively entities and their relations. An entity could be a person, a company, a product. Each entity can have properties that describes it, for example, a person could have a first name, last name, address, birth date and age. These properties are also refered to as the entity’s metadata.\nRelations between entities are first class citizen, consequently, it becomes easy to traverse and discover related entities. Examples of relations could be a person is friend with an other person (John –friend–> Ann) or a person works for a company (Eric –works for–> EPFL).\nFurthermore, a graph data structure makes it easy to merge new data in existing graph.","title":"It is a graph structure"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/thinking-in-graph.html#it-is-semantic","text":"The metadata definition is encoded, alongside the metadata, in an ontology. This is a formal description that both humans and computers can understand and process. The metadata is said to be self descriptive.\nIn the example below, you can see that the entity Bob is a Person (also known as the type of the entity) and he has a property was born on for this the value is 14 July 1990.","title":"It is semantic"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/thinking-in-graph.html#it-is-smart","text":"Since all this information is represented in an ontology, it enables us to run a tool called an inference engine on the data and derive new information from explicitly asserted data. This inference can make information easier to discover.\nIn the example below, we have Bob, he has parents (using the relation called parent) and we have asserted that his father also has parents. Having define this, we can now define a rule that instructs the inference engine to create new relations grand parent whenever we find the parent of a parent. This enables us to query the graph and directly get Bob’s grand parents without having to navigate through his parents first.","title":"It is smart"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/thinking-in-graph.html#it-is-alive","text":"A graph is a flexible data structure, and an ontology can evolve as new data comes in. As a result, Data can be continually be added to help serve new usecases.\nThe illustration below shows how the initial graph representing Bob can be augmented to capture many other related domains such as:\nBob’s social network (e.g. Friends) People’s tourism destinations (e.g. Eiffel Tower) Towns and tourism landmarks (e.g. Louvre) Pieces of arts and where they are located (e.g. Mona Lisa)","title":"It is alive"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/understanding-jsonld.html","text":"","title":"Understanding JSON-LD"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/understanding-jsonld.html#understanding-json-ld","text":"","title":"Understanding JSON-LD"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/understanding-jsonld.html#rdf","text":"RDF (Resource Description Framework) is a (extremely simple and truly schemaless) data model where every piece of knowledge is broken down in (subject, predicate and object) called triple.","title":"RDF"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/understanding-jsonld.html#json-ld","text":"JSON-LD stands for JSON for Linking Data.\nA simple json example:\n[\n  \t {\n  \t\t\"name\":\"python\",\n  \t\t\"loadedFrom\":\"java\"\n  \t },\n  \t{\n  \t\t\"name\":\"java\",\n  \t\t\"testedFrom\":\"java\"\n  \t }\n\n  ]\nWhat this data is about ? Programming languages or particular snake type and coffee you would find in the Java Indonesia ? There is clearly a lack of context resulting in an ambiguity. JSON-LD allows to solve the ambiguity problem by enabling a semantic-preserving data exchange. It does that by adding to a json document a @context object where every key is associated with an identifier.\nFor example with the payload below machine and human agents can look up the context to find out which JAVA are this data talking about.\n[\n  \t {\n  \t    \"@context\":\"https://json-ld.org/contexts/programminglanguage.jsonld\",\n  \t\t\"name\":\"python\",\n  \t\t\"loadedFrom\":\"java\"\n  \t },\n  \t{\n  \t    \"@context\":\"https://json-ld.org/contexts/programminglanguage.jsonld\",\n  \t\t\"name\":\"java\",\n  \t\t\"testedFrom\":\"java\"\n  \t }\n\n  ]\nLet go the JSON-LD playground to have a closer look at its data model.","title":"JSON-LD"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/create-knowledge-graph.html","text":"","title":"Build a little knowledge Graph"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/create-knowledge-graph.html#build-a-little-knowledge-graph","text":"","title":"Build a little knowledge Graph"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/create-knowledge-graph.html#overview","text":"This tutorial demonstrates how to step by step create a little knowledge graph.","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/create-knowledge-graph.html#what-youll-build","text":"A simple knowledge graph","title":"What you’ll build"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/create-knowledge-graph.html#what-youll-learn","text":"Basics of knowledge graph and json-ld How to build a knowledge graph from csv and json data","title":"What you’ll learn"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/create-knowledge-graph.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/create-knowledge-graph.html#get-the-tutorial-code","text":"This tutorial code is available:\nat Github on Google Colab","title":"Get the tutorial code"},{"location":"/docs/bluebrainnexustutorialkcni/ingest-allen-celltypes-db-in-nexus/index.html","text":"","title":"Ingest Allen Cell Types Database in Nexus"},{"location":"/docs/bluebrainnexustutorialkcni/ingest-allen-celltypes-db-in-nexus/index.html#ingest-allen-cell-types-database-in-nexus","text":"","title":"Ingest Allen Cell Types Database in Nexus"},{"location":"/docs/bluebrainnexustutorialkcni/ingest-allen-celltypes-db-in-nexus/index.html#overview","text":"","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/ingest-allen-celltypes-db-in-nexus/index.html#what-youll-build","text":"A pipeline demonstrating how to: collect data from a remote source: Allen Cell Types Database ingest the collected file data in a knowledge graph within Blue Brain Nexus map the collected metadata to the Neuroshapes data model ingest the mapped metadata in a knowledge graph within Blue Brain Nexus find ingested data in the knowledge graph download filtered subsets of data from the knowledge graph","title":"What you’ll build"},{"location":"/docs/bluebrainnexustutorialkcni/ingest-allen-celltypes-db-in-nexus/index.html#what-youll-learn","text":"How to leverage a knowledge graph as part of a data pipeline to ingest and manage (meta)data, search for data and record data provenance","title":"What you’ll learn"},{"location":"/docs/bluebrainnexustutorialkcni/ingest-allen-celltypes-db-in-nexus/index.html#what-youll-need","text":"Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bluebrainnexustutorialkcni/ingest-allen-celltypes-db-in-nexus/index.html#get-the-tutorial-code","text":"This tutorial code is available:\nat Github on Google Colab","title":"Get the tutorial code"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/index.html","text":"","title":"Web scale data publishing"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/index.html#web-scale-data-publishing","text":"","title":"Web scale data publishing"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/index.html#overview","text":"Publishing a scientific article is often associated with the publication of data and analysis used as part of experiments or to support the article claims. Such data and analysis are made available to the research community through web portal (e.g BBP NMC portal). The goal of this tutorial is to demonstrate how to embed metadata from a knowledge graph within a web pages that made a scientific data portal.","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/index.html#what-youll-build","text":"A simple web page and embed in it JSONLD metadata from Nexus","title":"What you’ll build"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/index.html#what-youll-learn","text":"Why you should markup your scientific data portals with structured data ? How to embed structured data within a web page ? How to validate structured data ?","title":"What you’ll learn"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/index.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/embed.html","text":"","title":"Add structured data to your web pages"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/embed.html#add-structured-data-to-your-web-pages","text":"","title":"Add structured data to your web pages"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/embed.html#let-create-a-web-page","text":"GO to glitch and create a hello-webpage project as shown below.","title":"Let create a web page"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/embed.html#where-to-add-the-structured-data-in-a-web-page-","text":"The JSON-LD payload should be inside a <script > element in either the <head> or <body> of the index.html page.\n<html>\n<head>\n...\n<script type=\"application/ld+json\">\n{\n\n}\n</script>\n</head>\n</html>","title":"Where to add the structured data in a web page?"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/embed.html#add-the-scholarly-article-structured-data","text":"<html>\n<head>\n...\n<script type=\"application/ld+json\">\n{\n    \"@context\":\"http://schema.org\",\n    \"@id\": \"https://doi.org/10.1016/j.cell.2015.09.029\",\n    \"@type\": \"ScholarlyArticle\",\n    \"author\": \"http://your/id/here\",\n    \"datePublished\": \"2015-10\",\n    \"name\": \"Reconstruction and Simulation of Neocortical Microcircuitry\"\n}\n\n</script>\n</head>\n</html>","title":"Add the scholarly article structured data"},{"location":"/docs/bluebrainnexustutorialkcni/bbp-kg-schema/embed.html#validate-the-added-structured-data","text":"Get the web site url as shown in the figure below.\nGo to Google structure data testing tool and paste the web page URL as shown below.","title":"Validate the added structured data"},{"location":"/docs/bluebrainnexustutorialkcni/build-recommender-kgembeddings/index.html","text":"","title":"Building a Data Pipeline for a Content based Recommender System"},{"location":"/docs/bluebrainnexustutorialkcni/build-recommender-kgembeddings/index.html#building-a-data-pipeline-for-a-content-based-recommender-system","text":"","title":"Building a Data Pipeline for a Content based Recommender System"},{"location":"/docs/bluebrainnexustutorialkcni/build-recommender-kgembeddings/index.html#overview","text":"This hands-on tutorial will focus on entity recommendation using knowledge graph embeddings and Blue Brain Nexus. Many entity recommender strategies exist including collaborative filtering, content-based recommendation or combination of the two. This tutorial will only focus on content-based recommendation and put an emphasis on how Blue Brain Nexus can support and orchestrate serving and using knowledge graph embeddings for entity recommendation.","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/build-recommender-kgembeddings/index.html#what-youll-build","text":"You will use a Jupyter notebook to build a pipeline to train embeddings for knowledge graph entities and use them for content-based recommendation. You’ll follow the next steps:\nSet up a Nexus environment in Python Pull data from Nexus Prepare the data and ensure they are in a good shape for embeddings Train the embeddings model Push the embeddings in Nexus Recommend similar items using the embeddings and Blue Brain Nexus ElasticSearch view","title":"What you’ll build"},{"location":"/docs/bluebrainnexustutorialkcni/build-recommender-kgembeddings/index.html#what-youll-learn","text":"knowledge graph embeddings Blue Brain Nexus data projection and indexing ElasticSearch view creation and update in Blue Brain Nexus Content-based recommendation using Blue Brain Nexus","title":"What you’ll learn"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/querying-knowledge-graph.html","text":"","title":"Querying knowledge graph"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/querying-knowledge-graph.html#querying-knowledge-graph","text":"","title":"Querying knowledge graph"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/querying-knowledge-graph.html#overview","text":"This tutorial introduces the basics of SPARQL, a query language for querying RDF based knowledge graph. It also demonstrates how to query a Nexus SparqlView.","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/querying-knowledge-graph.html#what-youll-build","text":"Queries to explore and navigate a knowledge graph using SPARQL and Nexus","title":"What you’ll build"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/querying-knowledge-graph.html#what-youll-learn","text":"Basics of the SPARQL query language How to connect to and query a SparqlView in Nexus","title":"What you’ll learn"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/querying-knowledge-graph.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bluebrainnexustutorialkcni/knowledge-graph/querying-knowledge-graph.html#get-the-tutorial-code","text":"This tutorial code is available:\nat Github on Google Colab","title":"Get the tutorial code"},{"location":"/docs/bbptutorial/knowledge-graph/querying-knowledge-graph.html","text":"","title":"Querying knowledge graph"},{"location":"/docs/bbptutorial/knowledge-graph/querying-knowledge-graph.html#querying-knowledge-graph","text":"","title":"Querying knowledge graph"},{"location":"/docs/bbptutorial/knowledge-graph/querying-knowledge-graph.html#overview","text":"This tutorial introduces the basics of SPARQL, a query language for querying RDF based knowledge graph. It also demonstrates how to query a Nexus SparqlView.","title":"Overview"},{"location":"/docs/bbptutorial/knowledge-graph/querying-knowledge-graph.html#what-youll-build","text":"Queries to explore and navigate a knowledge graph using SPARQL and Nexus","title":"What you’ll build"},{"location":"/docs/bbptutorial/knowledge-graph/querying-knowledge-graph.html#what-youll-learn","text":"Basics of the SPARQL query language How to connect to and query a SparqlView in Nexus","title":"What you’ll learn"},{"location":"/docs/bbptutorial/knowledge-graph/querying-knowledge-graph.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bbptutorial/knowledge-graph/querying-knowledge-graph.html#get-the-tutorial-code","text":"This tutorial code is available:\nat Github on Google Colab","title":"Get the tutorial code"},{"location":"/docs/bbptutorial/index.html","text":"","title":"Blue Brain Nexus workshop"},{"location":"/docs/bbptutorial/index.html#blue-brain-nexus-workshop","text":"","title":"Blue Brain Nexus workshop"},{"location":"/docs/bbptutorial/index.html#overview","text":"This documentation contains a set of hands-on and example-driven tutorials showing how to:\nQuickly start with Blue Brain Nexus Understand, build and query a Knowledge Graph Use Blue Brain Nexus as part of a data analysis pipeline Use the Blue Brain Knowledge Graph schema for publishing data at web scale","title":"Overview"},{"location":"/docs/bbptutorial/getting-started/index.html","text":"","title":"Quick Start Tutorial"},{"location":"/docs/bbptutorial/getting-started/index.html#quick-start-tutorial","text":"","title":"Quick Start Tutorial"},{"location":"/docs/bbptutorial/getting-started/index.html#overview","text":"This Getting Started tutorial introduces basic Blue Brain Nexus features and capabilities.","title":"Overview"},{"location":"/docs/bbptutorial/getting-started/index.html#what-youll-build","text":"A project within a Blue Brain Nexus deployment where a set of entities are ingested and queryable. This tutorial will use a small version of the Global Research Identifier Database (GRID) dataset which is a catalog of the world’s research organisations.","title":"What you’ll build"},{"location":"/docs/bbptutorial/getting-started/index.html#what-youll-learn","text":"How to set up the Blue Brain Nexus CLI How to create and configure a project How to ingest data How to access data","title":"What you’ll learn"},{"location":"/docs/bbptutorial/getting-started/index.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bbptutorial/getting-started/setup/index.html","text":"","title":"Set up"},{"location":"/docs/bbptutorial/getting-started/setup/index.html#set-up","text":"","title":"Set up"},{"location":"/docs/bbptutorial/getting-started/setup/index.html#overview","text":"This tutorial explains how to install and set up the Blue Brain Nexus CLI to connect to a Blue Brain Nexus deployment.\nNote This tutorial makes use of an AWS deployment of Blue Brain Nexus available at https://sandbox.bluebrainnexus.io/v1. We will be using Nexus CLI, a python client, to interact with the deployment.\nLet’s get started.","title":"Overview"},{"location":"/docs/bbptutorial/getting-started/setup/index.html#install-the-cli","text":"Since the CLI is written in python, you may want to create a virtual environment for a clean set up. To do so, Conda can be used. If you don’t have it installed follow the instructions here.\nconda create -n nexus-cli python=3.5\nconda activate nexus-cli\npip install git+https://github.com/BlueBrain/nexus-cli","title":"Install the CLI"},{"location":"/docs/bbptutorial/getting-started/setup/index.html#connect-to-a-nexus-deployment","text":"","title":"Connect to a Nexus deployment"},{"location":"/docs/bbptutorial/getting-started/setup/index.html#configure-the-cli-to-point-to-a-specific-blue-brain-nexus-deployment","text":"To ease the usage of the CLI, we will create a profile named ‘tutorial’ storing locally various configurations such as the Nexus deployment url.\nCommand nexus profiles create tutorial https://sandbox.bluebrainnexus.io/v1 && nexus profiles select tutorial && nexus profiles listFull source at GitHub Output Profile created.\nSelected profile: tutorial\n+------------+----------+--------------------------------------+-------+\n| Profile    | Selected | URL                                  | Token |\n+------------+----------+--------------------------------------+-------+\n| tutorial   |   Yes    | https://sandbox.bluebrainnexus.io/v1 |  None |\n+------------+----------+--------------------------------------+-------+Full source at GitHub","title":"Configure the CLI to point to a specific Blue Brain Nexus deployment"},{"location":"/docs/bbptutorial/getting-started/setup/index.html#login","text":"A bearer token is needed to authenticate to Nexus. For the purpose of this tutorial, you’ll login using your github account.\nThe following command will open (after pressing enter button) a browser window from where you can login using your github account.\nCommand nexus auth loginFull source at GitHub Output A browser window will now open, please login, copy your token and use the auth set-token command to store it in the CLI\nPress ENTER to continue...Full source at GitHub\nFrom the opened web page, click on the login button on the right corner and follow the instructions.\nAt the end you’ll see a token button on the right corner. Click on it to copy the token.\nThe token can now be added to the tutorial profile. In the output of the following command you should see that the token column has now an expiry date.\nCommand nexus auth set-token $TOKEN && nexus profiles listFull source at GitHub Output +--------------+----------+-------------------------------------+-----------------------------+\n| Profile      | Selected | URL                                 |            Token            |\n+--------------+----------+-------------------------------------+-----------------------------+\n| tutorial     |   Yes    | https://sandbox.bluebrainnexus.io/v1         | Expiry: YYYY-MM-DD HH:mm:s |\n+--------------+----------+-------------------------------------+-----------------------------+Full source at GitHub\nThat’s it!","title":"Login"},{"location":"/docs/bbptutorial/getting-started/setup/index.html#clone-the-tutorial-github-project","text":"cd ~\ngit clone https://github.com/BlueBrain/nexus-bbp-domains.git\ncd ~/nexus-bbp-domains\ngit checkout docs\ncd src/main/paradox/docs/bbptutorial","title":"Clone the tutorial github project"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html","text":"","title":"Quick Start"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#quick-start","text":"","title":"Quick Start"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#overview","text":"This example-driven tutorial presents 5 steps to get started with Blue Brain Nexus to build and query a simple knowledge graph. The goal is to go over some capabilities of Blue Brain Nexus enabling:\nThe creation of a project as a protected data space to work with An easy ingestion of a dataset Querying a dataset to retrieve various information Sharing a dataset by making it public\nFor that we will work with the small version of the Global Research Identifier Database (GRID) dataset containing a set of:\ninstitutes (institutes.csv) their acronyms (acronyms.csv) their addresses (addresses.csv) their urls (links.csv) and their relationships (relationships.csv)\nAn overview of this dataset can be found here.\nNote We will be using Blue Brain Nexus CLI, a python client throughout this quick start tutorial. This tutorial assumes you’ve installed and configured the CLI. If not, please follow the set up instructions.\nLet’s get started.","title":"Overview"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#create-a-project","text":"Projects in BlueBrain Nexus are spaces where data can be:\nmanaged: created, updated, deprecated, validated, secured; accessed: directly by ids or through various search interfaces; shared: through fine grain Access Control List.\nA project is always created within an organization just like a git repository is created in a github organization. Organizations can be understood as accounts hosting multiple projects.","title":"Create a project"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#select-an-organization","text":"Note A public organization named demo is already created for the purpose of this tutorial. All projects will be created under this organization.\nThe following command should list the organizations you have access to. The demo organization should be listed and tagged as non-deprecated in the output.\nCommand nexus orgs listFull source at GitHub Output +----------------+-------------------+-------------------------------------------------+------------+\n| Name           | Description       | Id                                              | Deprecated |\n+----------------+-------------------+-----------------------------------------------------+--------+\n| demo  | Nexus sandbox     | https://sandbox.bluebrainnexus.io/v1/demo     | False      |Full source at GitHub\nLet select the demo organization.\nCommand nexus orgs select demoFull source at GitHub Output demo organization selected.Full source at GitHub","title":"Select an organization"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#create-a-project","text":"A project is created with a label and within an organization. The label should be made of alphanumerical characters and its length should be between 3 and 32 (it should match the regex: [a-zA-Z0-9-_]{3,32}).\nPick a label (hereafter referred to as $PROJECTLABEL) and create a project using the following command. It is recommended to use your github username to avoid collision of projects labels within an organization.\nCommand nexus projects create $PROJECTLABEL && nexus projects listFull source at GitHub Output Project created (id: https://sandbox.bluebrainnexus.io/v1/projects/demo/$PROJECTLABEL)\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| Label         | Description | Id                                                                     | Deprecated |\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| $PROJECTLABEL |             | https://sandbox.bluebrainnexus.io/v1/projects/demo/$PROJECTLABEL | False      |\n+---------------+-------------+------------------------------------------------------------------------+------------+Full source at GitHub\nBy default, created projects are private meaning that only the project creator (you) has read and write access to it. We’ll see below how to make a project public.\nThe output of the previous command shows the list of projects you have read access to. The project you just created should be the only one listed at this point. Let select it.\nCommand nexus projects select $PROJECTLABEL && nexus projects listFull source at GitHub Output $PROJECTLABEL project selected\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| Label         | Description | Id                                                                     | Deprecated |\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| $PROJECTLABEL |             | https://sandbox.bluebrainnexus.io/v1/projects/demo/$PROJECTLABEL | False      |\n+---------------+-------------+------------------------------------------------------------------------+------------+Full source at GitHub\nWe are all set to bring some data within the project we just created.","title":"Create a project"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#ingest-data","text":"","title":"Ingest data"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#load-the-dataset","text":"Let first list the files that made the small version of the GRID dataset.\nCommand cd getting-started/dataset/grid-small && lsFull source at GitHub Output acronyms.csv  addresses.csv  institutes.csv  links.csv  relationships.csvFull source at GitHub\nThe data to be ingested come in 5 csv files (see the output of the above command) containing each a partial description of the organizations. A single command allows to load the organisations within the institutes.csv file and merge it with all the other csv files.\nnexus resources create --file institutes.csv --type Organization --format csv \\\n --idcolumn grid_id --idnamespace http://www.grid.ac/institutes/ \\\n --mergewith links.csv --mergewith addresses.csv --mergewith relationships.csv --mergewith acronyms.csv \\\n --mergeon grid_id \\\n --max-connections 4","title":"Load the dataset"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#access-data","text":"","title":"Access data"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#view-data-in-nexus-web","text":"Nexus is deployed with a developer oriented web application allowing to browse organizations, projects, data and schemas you have access to. You can go to the address https://sandbox.bluebrainnexus.io/web/demo and browse the data you just loaded.","title":"View data in Nexus Web"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#list-data","text":"The simplest way to accessed data within Nexus is by listing them. The following command lists 5 resources:\nCommand nexus resources list --size 5Full source at GitHub\nThe full payload of the resources are not retrieved when listing them: only identifier, type as well as Nexus added metadata are. But the result list can be scrolled and each resource fetched by identifier.\nLet fetch the EPFL organization identified by http://www.grid.ac/institutes/grid.5333.6\nCommand nexus resources fetch http://www.grid.ac/institutes/grid.5333.6Full source at GitHub Output {\n  \"@context\": [\n    {\n      \"@base\": \"https://sandbox.bluebrainnexus.io/v1/resources/demo/$PROJECTLABEL/_/\",\n      \"@vocab\": \"https://sandbox.bluebrainnexus.io/v1/vocabs/demo/$PROJECTLABEL/\"\n    },\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"http://www.grid.ac/institutes/grid.5333.6\",\n  \"@type\": \"Organization\",\n  \"acronym\": \"EPFL\",\n  \"city\": \"Lausanne\",\n  \"country\": \"Switzerland\",\n  \"country_code\": \"CH\",\n  \"email_address\": \"\",\n  \"established\": 1853,\n  \"geonames_city_id\": 2659994,\n  \"grid_id\": \"grid.5333.6\",\n  \"lat\": 46.519082,\n  \"line_1\": \"\",\n  \"line_2\": \"\",\n  \"line_3\": \"\",\n  \"link\": \"http://www.epfl.ch/index.en.html\",\n  \"lng\": 6.566747,\n  \"name\": \"\\u00c9cole Polytechnique F\\u00e9d\\u00e9rale de Lausanne\",\n  \"postcode\": \"\",\n  \"primary\": false,\n  \"related_grid_id\": \"grid.482253.a\",\n  \"relationship_type\": \"Related\",\n  \"state\": \"\",\n  \"state_code\": \"\",\n  \"wikipedia_url\": \"http://en.wikipedia.org/wiki/%C3%89cole_Polytechnique_F%C3%A9d%C3%A9rale_de_Lausanne\",\n  \"_self\": \"https://sandbox.bluebrainnexus.io/v1/resources/demo/testdemo/_/http%3A%2F%2Fwww.grid.ac%2Finstitutes%2Fgrid.5333.6\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/unconstrained.json\",\n  \"_project\": \"https://sandbox.bluebrainnexus.io/v1/projects/demo/testdemo\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-06-04T08:42:26.433Z\",\n  \"_createdBy\": \"https://sandbox.bluebrainnexus.io/v1/realms/github/users/mfsy\",\n  \"_updatedAt\": \"2019-06-04T08:42:26.433Z\",\n  \"_updatedBy\": \"https://sandbox.bluebrainnexus.io/v1/realms/github/users/mfsy\"\n}Full source at GitHub\nWhenever a resource is created, Nexus injects some useful metadata. The table below details some of them:\nMetadata Description Value Type @id Generated resource identifier. The user can provide its own identifier. URI @type The type of the resource if provided by the user. URI _self The resource address within Nexus. It contains the resource management details such as the organization, the project and the schema. URI _createdAt The resource creation date. DateTime _createdBy The resource creator. DateTime\nNote that Nexus uses JSON-LD as data exchange format.\nFilters are available to list specific resources. For example a list of resources of type Organization can be retrieved by running the following command:\nCommand nexus resources list --type Organization --size 5Full source at GitHub Output +------------------------------------------------------------------------------------+----------------------------------------------------------------------------+----------+------------+\n| Id                                                                                 | Type                                                                       | Revision | Deprecated |\n+------------------------------------------------------------------------------------+----------------------------------------------------------------------------+----------+------------+\n| https://sandbox.bluebrainnexus.io/v1/resources/demo/$PROJECTLABEL/_/Rating_1  | https://sandbox.bluebrainnexus.io/v1/vocabs/demo/$PROJECTLABEL/Rating | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/demo/$PROJECTLABEL/_/Rating_9  | https://sandbox.bluebrainnexus.io/v1/vocabs/demo/$PROJECTLABEL/Rating | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/demo/$PROJECTLABEL/_/Rating_12 | https://sandbox.bluebrainnexus.io/v1/vocabs/demo/$PROJECTLABEL/Rating | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/demo/$PROJECTLABEL/_/Rating_7  | https://sandbox.bluebrainnexus.io/v1/vocabs/demo/$PROJECTLABEL/Rating | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/demo/$PROJECTLABEL/_/Rating_8  | https://sandbox.bluebrainnexus.io/v1/vocabs/demo/$PROJECTLABEL/Rating | 1        | False      |\n+------------------------------------------------------------------------------------+----------------------------------------------------------------------------+----------+------------+Full source at GitHub","title":"List data"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#query-data","text":"Listing is usually not enough to select specific subset of data. Data ingested within each project can be searched through two complementary search interfaces called views.\nView Description ElasticSearchView Exposes data in ElasticSearch, a document oriented search engine and provide access to it using the ElasticSearch query language. SparqlView Exposes data as a graph and allows to navigate and explore the data using the W3C Sparql query language.","title":"Query data"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#query-data-using-the-elasticsearchview","text":"The ElasticSearchView URL is available at the address https://sandbox.bluebrainnexus.io/v1/views/demo/$PROJECTLABEL/documents/_search.\nThe query below selects 5 organizations sorted by creation date in descending order.\nSelect queries nexus views query-es --data \\\n'{\n     \"size\":5,\n     \"sort\" : [\n       {\n        \"_createdAt\" : {\"order\" : \"desc\"}\n       }\n     ],\n     \"query\": {\n     \t\"terms\" : {\"@type\":[\"https://sandbox.bluebrainnexus.io/v1/vocabs/demo/$PROJECTLABEL/Organization\"]}\n     }\n }'\nFull source at GitHub","title":"Query data using the ElasticSearchView"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#query-data-using-the-sparqlview","text":"The SparqlView is available at the address [https://sandbox.bluebrainnexus.io/v1/views/demo/$PROJECTLABEL/graph/sparql]. The following diagram shows how the MovieLens data is structured in the default Nexus SparqlView. Note that the ratings, tags and movies are joined by the movieId property.\nThe query below selects 5 organizations sorted by creation date in descending order.\nSelect queries nexus views query-sparql --data \\\n'\nPREFIX vocab: <https://sandbox.bluebrainnexus.io/v1/vocabs/demo/$PROJECTLABEL/>\nPREFIX nxv: <https://bluebrain.github.io/nexus/vocabulary/>\nSelect ?org ?name ?createdAt\n WHERE  {\n\n    ?org a vocab:Organization.\n    ?org vocab:name  ?name.\n    ?org nxv:createdAt ?createdAt\n}\nORDER BY DESC (?createdAt)\nLIMIT 5'Full source at GitHub","title":"Query data using the SparqlView"},{"location":"/docs/bbptutorial/getting-started/quick-start/index.html#share-data","text":"Making a dataset public means granting read permissions to “anonymous” user.\n$ nexus acls make-public\nTo check that the dataset is now public:\nAsk the person next to you to list resources in your project. Or create and select another profile named public-tutorial (following the instructions in the Set up. You should see the that the public-tutorial is selected and its corresponding token column is None.\nOutput Selected profile: tutorial\n+-------------------+----------+-------------------------------------+------------------+\n| Profile           | Selected | URL                                 |       Token      |\n+-------------------+----------+-------------------------------------+------------------+\n| tutorial          |          | https://sandbox.bluebrainnexus.io/v1         |  Expiry: 2019... |\n| public-tutorial   |   Yes    | https://sandbox.bluebrainnexus.io/v1         |       None       |\n+-------------------+----------+-------------------------------------+------------------+Full source at GitHub\nResources in your project should be listed with the command even though you are not authenticated.\nCommand nexus resources list --size 5 -o demo -p $PROJECTLABELFull source at GitHub","title":"Share data"},{"location":"/docs/bbptutorial/getting-started/dataset/index.html","text":"","title":"The GRID Dataset"},{"location":"/docs/bbptutorial/getting-started/dataset/index.html#the-grid-dataset","text":"","title":"The GRID Dataset"},{"location":"/docs/bbptutorial/getting-started/dataset/index.html#overview","text":"In this tutorial, we’ll use a small version of the GRID dataset. GRID is an open dataset of research organizations and institutes from all around the world. It provides detailed descriptions of organizations in csv, json.","title":"Overview"},{"location":"/docs/bbptutorial/knowledge-graph/index.html","text":"","title":"Understanding knowledge graphs"},{"location":"/docs/bbptutorial/knowledge-graph/index.html#understanding-knowledge-graphs","text":"","title":"Understanding knowledge graphs"},{"location":"/docs/bbptutorial/knowledge-graph/index.html#overview","text":"How does Google display information card like in the following search ? Well they use the Google Knowledge Graph. Knowledge graphs are now ubiquitous and serves as data integration hub to integrate and connect data of different types, formats and sources.","title":"Overview"},{"location":"/docs/bbptutorial/knowledge-graph/index.html#what-youll-build","text":"A simple knowledge graph following a step by step approach Queries to explore and navigate the knowledge graph","title":"What you’ll build"},{"location":"/docs/bbptutorial/knowledge-graph/index.html#what-youll-learn","text":"What is a knowledge graph ? JSON-LD and the Resource Description Framework (RDF) data model How to query a knowledge graph ?","title":"What you’ll learn"},{"location":"/docs/bbptutorial/knowledge-graph/index.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bbptutorial/knowledge-graph/thinking-in-graph.html","text":"","title":"Thinking in graph"},{"location":"/docs/bbptutorial/knowledge-graph/thinking-in-graph.html#thinking-in-graph","text":"","title":"Thinking in graph"},{"location":"/docs/bbptutorial/knowledge-graph/thinking-in-graph.html#what-is-a-knowledge-graph-","text":"In this section, we will explain what a Knowledge Graph and some of the advantages of using them.","title":"What is a Knowledge Graph ?"},{"location":"/docs/bbptutorial/knowledge-graph/thinking-in-graph.html#it-is-a-graph-structure","text":"A knowledge graph uses a graph data structure to represent information, it uses the concept of nodes and edges to represent respectively entities and their relations. An entity could be a person, a company, a product. Each entity can have properties that describes it, for example, a person could have a first name, last name, address, birth date and age. These properties are also refered to as the entity’s metadata.\nRelations between entities are first class citizen, consequently, it becomes easy to traverse and discover related entities. Examples of relations could be a person is friend with an other person (John –friend–> Ann) or a person works for a company (Eric –works for–> EPFL).\nFurthermore, a graph data structure makes it easy to merge new data in existing graph.","title":"It is a graph structure"},{"location":"/docs/bbptutorial/knowledge-graph/thinking-in-graph.html#it-is-semantic","text":"The metadata definition is encoded, alongside the metadata, in an ontology. This is a formal description that both humans and computers can understand and process. The metadata is said to be self descriptive.\nIn the example below, you can see that the entity Bob is a Person (also known as the type of the entity) and he has a property was born on for this the value is 14 July 1990.","title":"It is semantic"},{"location":"/docs/bbptutorial/knowledge-graph/thinking-in-graph.html#it-is-smart","text":"Since all this information is represented in an ontology, it enables us to run a tool called an inference engine on the data and derive new information from explicitly asserted data. This inference can make information easier to discover.\nIn the example below, we have Bob, he has parents (using the relation called parent) and we have asserted that his father also has parents. Having define this, we can now define a rule that instructs the inference engine to create new relations grand parent whenever we find the parent of a parent. This enables us to query the graph and directly get Bob’s grand parents without having to navigate through his parents first.","title":"It is smart"},{"location":"/docs/bbptutorial/knowledge-graph/thinking-in-graph.html#it-is-alive","text":"A graph is a flexible data structure, and an ontology can evolve as new data comes in. As a result, Data can be continually be added to help serve new usecases.\nThe illustration below shows how the initial graph representing Bob can be augmented to capture many other related domains such as:\nBob’s social network (e.g. Friends) People’s tourism destinations (e.g. Eiffel Tower) Towns and tourism landmarks (e.g. Louvre) Pieces of arts and where they are located (e.g. Mona Lisa)","title":"It is alive"},{"location":"/docs/bbptutorial/knowledge-graph/understanding-jsonld.html","text":"","title":"Understanding JSON-LD"},{"location":"/docs/bbptutorial/knowledge-graph/understanding-jsonld.html#understanding-json-ld","text":"","title":"Understanding JSON-LD"},{"location":"/docs/bbptutorial/knowledge-graph/understanding-jsonld.html#rdf","text":"RDF (Resource Description Framework) is a (extremely simple and truly schemaless) data model where every piece of knowledge is broken down in (subject, predicate and object) called triple.","title":"RDF"},{"location":"/docs/bbptutorial/knowledge-graph/understanding-jsonld.html#json-ld","text":"JSON-LD stands for JSON for Linking Data.\nA simple json example:\n[\n  \t {\n  \t\t\"name\":\"python\",\n  \t\t\"loadedFrom\":\"java\"\n  \t },\n  \t{\n  \t\t\"name\":\"java\",\n  \t\t\"testedFrom\":\"java\"\n  \t }\n\n  ]\nWhat this data is about ? Programming languages or particular snake type and coffee you would find in the Java Indonesia ? There is clearly a lack of context resulting in an ambiguity. JSON-LD allows to solve the ambiguity problem by enabling a semantic-preserving data exchange. It does that by adding to a json document a @context object where every key is associated with an identifier.\nFor example with the payload below machine and human agents can look up the context to find out which JAVA are this data talking about.\n[\n  \t {\n  \t    \"@context\":\"https://json-ld.org/contexts/programminglanguage.jsonld\",\n  \t\t\"name\":\"python\",\n  \t\t\"loadedFrom\":\"java\"\n  \t },\n  \t{\n  \t    \"@context\":\"https://json-ld.org/contexts/programminglanguage.jsonld\",\n  \t\t\"name\":\"java\",\n  \t\t\"testedFrom\":\"java\"\n  \t }\n\n  ]\nLet go the JSON-LD playground to have a closer look at its data model.","title":"JSON-LD"},{"location":"/docs/bbptutorial/knowledge-graph/create-knowledge-graph.html","text":"","title":"Build a little knowledge Graph"},{"location":"/docs/bbptutorial/knowledge-graph/create-knowledge-graph.html#build-a-little-knowledge-graph","text":"","title":"Build a little knowledge Graph"},{"location":"/docs/bbptutorial/knowledge-graph/create-knowledge-graph.html#overview","text":"This tutorial demonstrates how to step by step create a little knowledge graph.","title":"Overview"},{"location":"/docs/bbptutorial/knowledge-graph/create-knowledge-graph.html#what-youll-build","text":"A simple knowledge graph","title":"What you’ll build"},{"location":"/docs/bbptutorial/knowledge-graph/create-knowledge-graph.html#what-youll-learn","text":"Basics of knowledge graph and json-ld How to build a knowledge graph from csv and json data","title":"What you’ll learn"},{"location":"/docs/bbptutorial/knowledge-graph/create-knowledge-graph.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bbptutorial/knowledge-graph/create-knowledge-graph.html#get-the-tutorial-code","text":"This tutorial code is available:\nat Github on Google Colab","title":"Get the tutorial code"},{"location":"/docs/bbptutorial/building-a-data-pipeline/index.html","text":"","title":"Building a data pipeline"},{"location":"/docs/bbptutorial/building-a-data-pipeline/index.html#building-a-data-pipeline","text":"","title":"Building a data pipeline"},{"location":"/docs/bbptutorial/building-a-data-pipeline/index.html#overview","text":"","title":"Overview"},{"location":"/docs/bbptutorial/building-a-data-pipeline/index.html#what-youll-build","text":"A pipeline demonstrating how to: download data (e.g. morphologies) from a remote source (e.g. Allen Cell Types Database) register the downloaded data in a knowledge graph within Blue Brain Nexus register the dataset provenance in the knowledge graph build a dataset made of entities of interest (e.g. a set of morphologies from a given species, brain region) and register it in Blue Brain Nexus with an immutable identifier Run analysis on the build dataset (e.g. topological analysis of neuronal morphologies using Topological Morphology Descriptor ) Register the analysis results (plots, figures) in the Knowledge graph and record their provenance","title":"What you’ll build"},{"location":"/docs/bbptutorial/building-a-data-pipeline/index.html#what-youll-learn","text":"How to leverage a knowledge graph as part of a data anaylis pipeline to store and manage (meta)data, search for data and record data provenance","title":"What you’ll learn"},{"location":"/docs/bbptutorial/building-a-data-pipeline/index.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bbptutorial/building-a-data-pipeline/index.html#get-the-tutorial-code","text":"This tutorial code is available:\nat Github on Google Colab","title":"Get the tutorial code"},{"location":"/docs/bbptutorial/bbp-kg-schema/index.html","text":"","title":"Web scale data publishing"},{"location":"/docs/bbptutorial/bbp-kg-schema/index.html#web-scale-data-publishing","text":"","title":"Web scale data publishing"},{"location":"/docs/bbptutorial/bbp-kg-schema/index.html#overview","text":"Publishing a scientific article is often associated with the publication of data and analysis used as part of experiments or to support the article claims. Such data and analysis are made available to the research community through web portal (e.g BBP NMC portal). The goal of this tutorial is to demonstrate how to embed metadata from a knowledge graph within a web pages that made a scientific data portal.","title":"Overview"},{"location":"/docs/bbptutorial/bbp-kg-schema/index.html#what-youll-build","text":"A simple web page and embed in it JSONLD metadata from Nexus","title":"What you’ll build"},{"location":"/docs/bbptutorial/bbp-kg-schema/index.html#what-youll-learn","text":"Why you should markup your scientific data portals with structured data ? How to embed structured data within a web page ? How to validate structured data ?","title":"What you’ll learn"},{"location":"/docs/bbptutorial/bbp-kg-schema/index.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bbptutorial/bbp-kg-schema/embed.html","text":"","title":"Add structured data to your web pages"},{"location":"/docs/bbptutorial/bbp-kg-schema/embed.html#add-structured-data-to-your-web-pages","text":"","title":"Add structured data to your web pages"},{"location":"/docs/bbptutorial/bbp-kg-schema/embed.html#let-create-a-web-page","text":"GO to glitch and create a hello-webpage project as shown below.","title":"Let create a web page"},{"location":"/docs/bbptutorial/bbp-kg-schema/embed.html#where-to-add-the-structured-data-in-a-web-page-","text":"The JSON-LD payload should be inside a <script > element in either the <head> or <body> of the index.html page.\n<html>\n<head>\n...\n<script type=\"application/ld+json\">\n{\n\n}\n</script>\n</head>\n</html>","title":"Where to add the structured data in a web page?"},{"location":"/docs/bbptutorial/bbp-kg-schema/embed.html#add-the-scholarly-article-structured-data","text":"<html>\n<head>\n...\n<script type=\"application/ld+json\">\n{\n    \"@context\":\"http://schema.org\",\n    \"@id\": \"https://doi.org/10.1016/j.cell.2015.09.029\",\n    \"@type\": \"ScholarlyArticle\",\n    \"author\": \"http://your/id/here\",\n    \"datePublished\": \"2015-10\",\n    \"name\": \"Reconstruction and Simulation of Neocortical Microcircuitry\"\n}\n\n</script>\n</head>\n</html>","title":"Add the scholarly article structured data"},{"location":"/docs/bbptutorial/bbp-kg-schema/embed.html#validate-the-added-structured-data","text":"Get the web site url as shown in the figure below.\nGo to Google structure data testing tool and paste the web page URL as shown below.","title":"Validate the added structured data"},{"location":"/docs/bbptutorial/notebooks/morphology-integration/README.html","text":"","title":"Nexus morphology integration"},{"location":"/docs/bbptutorial/notebooks/morphology-integration/README.html#nexus-morphology-integration","text":"","title":"Nexus morphology integration"},{"location":"/docs/bbptutorial/notebooks/morphology-integration/README.html#step-1-configure-the-blue-brain-nexus-environment","text":"Go to Nexus Web (https://bbp.epfl.ch/nexus/web) and obtain the access token. Fill the config.json with the deployment url, organization and project name as well as the token.","title":"Step 1: Configure the Blue Brain Nexus Environment"},{"location":"/docs/bbptutorial/notebooks/morphology-integration/README.html#step-2-fill-the-metadata-of-the-morphology","text":"Fill the metadata.json with all the fields except mtype which is an optional field.","title":"Step 2: Fill the metadata of the morphology"},{"location":"/docs/bbptutorial/notebooks/morphology-integration/README.html#step-3-ingest-data","text":"Run the nexus-morphology-integration.py to ingest data in the terminal. If the ingestion succeeds, it would return the Nexus IDs of the ingested entities.\n$ python nexus-morphology-integration.py $metadata.json\nNexus instance connected\n\nData ingested successfully. The resulting Nexus IDs are: \n{\n  \"image_id\": \"https://bbp.epfl.ch/neurosciencegraph/data/imagestack.18454\",\n  \"subject_id\": \"https://bbp.epfl.ch/neurosciencegraph/data/subject.Ai82;Ai140-37336\",\n  \"morphology_id\": \"https://bbp.epfl.ch/neurosciencegraph/data/neuronmorphology.z3718-x10944-y12141\"\n}\n\nPlease email the resulting IDs to <patrycja.lurie@epfl.ch>","title":"Step 3: Ingest data"},{"location":"/docs/bbptutorial/notebooks/morphology-integration/README.html#step-4-notify-data-curator","text":"Notify the morphology curator at EPFL by email to patrycja.lurie@epfl.ch.","title":"Step 4: Notify data curator"},{"location":"/docs/bluebrainnexustutorialkcni/building-a-data-pipeline/index.html","text":"","title":"Building a data pipeline"},{"location":"/docs/bluebrainnexustutorialkcni/building-a-data-pipeline/index.html#building-a-data-pipeline","text":"","title":"Building a data pipeline"},{"location":"/docs/bluebrainnexustutorialkcni/building-a-data-pipeline/index.html#overview","text":"","title":"Overview"},{"location":"/docs/bluebrainnexustutorialkcni/building-a-data-pipeline/index.html#what-youll-build","text":"A pipeline demonstrating how to: download data (e.g. morphologies) from a remote source (e.g. Allen Cell Types Database) register the downloaded data in a knowledge graph within Blue Brain Nexus register the dataset provenance in the knowledge graph build a dataset made of entities of interest (e.g. a set of morphologies from a given species, brain region) and register it in Blue Brain Nexus with an immutable identifier Run analysis on the build dataset (e.g. topological analysis of neuronal morphologies using Topological Morphology Descriptor ) Register the analysis results (plots, figures) in the Knowledge graph and record their provenance","title":"What you’ll build"},{"location":"/docs/bluebrainnexustutorialkcni/building-a-data-pipeline/index.html#what-youll-learn","text":"How to leverage a knowledge graph as part of a data anaylis pipeline to store and manage (meta)data, search for data and record data provenance","title":"What you’ll learn"},{"location":"/docs/bluebrainnexustutorialkcni/building-a-data-pipeline/index.html#what-youll-need","text":"A Python 3.5 or higher with support of Jupyter notebook","title":"What you’ll need"},{"location":"/docs/bluebrainnexustutorialkcni/building-a-data-pipeline/index.html#get-the-tutorial-code","text":"This tutorial code is available:\nat Github on Google Colab","title":"Get the tutorial code"}]}